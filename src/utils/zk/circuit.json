{
  "noir_version": "0.23.0+5be9f9d7e2f39ca228df10e5a530474af0331704",
  "hash": 11106019120628044212,
  "abi": {
    "parameters": [
      {
        "name": "signer_pub_x_key",
        "type": {
          "kind": "array",
          "length": 32,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "private"
      },
      {
        "name": "signer_pub_y_key",
        "type": {
          "kind": "array",
          "length": 32,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "private"
      },
      {
        "name": "signature",
        "type": {
          "kind": "array",
          "length": 64,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "private"
      },
      {
        "name": "selected_players_points",
        "type": {
          "kind": "array",
          "length": 11,
          "type": {
            "kind": "array",
            "length": 32,
            "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
          }
        },
        "visibility": "private"
      },
      {
        "name": "player_points_merkle_paths",
        "type": {
          "kind": "array",
          "length": 11,
          "type": {
            "kind": "array",
            "length": 6,
            "type": {
              "kind": "array",
              "length": 32,
              "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
            }
          }
        },
        "visibility": "private"
      },
      {
        "name": "all_player_points_merkle_root",
        "type": {
          "kind": "array",
          "length": 32,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "private"
      },
      {
        "name": "selected_player_ids",
        "type": {
          "kind": "array",
          "length": 11,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "public"
      },
      {
        "name": "selected_squad_hash",
        "type": {
          "kind": "array",
          "length": 32,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "public"
      },
      {
        "name": "claimed_player_points",
        "type": { "kind": "integer", "sign": "unsigned", "width": 64 },
        "visibility": "public"
      }
    ],
    "param_witnesses": {
      "all_player_points_merkle_root": [{ "start": 2592, "end": 2624 }],
      "claimed_player_points": [{ "start": 2667, "end": 2668 }],
      "player_points_merkle_paths": [{ "start": 480, "end": 2592 }],
      "selected_player_ids": [{ "start": 2624, "end": 2635 }],
      "selected_players_points": [{ "start": 128, "end": 480 }],
      "selected_squad_hash": [{ "start": 2635, "end": 2667 }],
      "signature": [{ "start": 64, "end": 128 }],
      "signer_pub_x_key": [{ "start": 0, "end": 32 }],
      "signer_pub_y_key": [{ "start": 32, "end": 64 }]
    },
    "return_type": null,
    "return_witnesses": []
  },
  "bytecode": "",
  "debug_symbols": "zdzdjl5Feobhc/E2ir73Z1XVy6lE2UDJRBppxESBPeRzD25stzN0j5vLWiP2EOrH9dG6C9QXq9cv7/729//84ee//v3Hn959/8u7XOu8+/7ff3n30//88OOHv/HTzz/878/vvu/u79795cf/evf9tc77797991//9pdf/269/+53Xxpd+fFr48r8yhfn+fzF1fP8xdf7//juw6eZf+mnqfP49MUd9btPsx9/qk8T3/pprrM+HbCu+edfnNf18Wtz1vOX9kt/buSnzxD50gfPP8UH/+2z1L/ys1R8+nOr+ivfxK/cjN1/1g/+tWyvb/3g+8SnA06sL7/4twPW3Qfsuw84dx8wNx9wHncfEHcfkHcfUHcf0HcfcPdNPnff5HP3TT533+Rz902eu2/y3H2T5+6bPHff5Ln7Js/dN3nuvslz902eu2/y3HyT9+Nx9wFx9wF59wF19wF99wHX3Qesuw/Ydx9w7j7g7pscd9/kuPsmx903Ob75Jq/1+cfj/eWPsZ8O+PabHPP5gP//xb8d8OJNvvYnzVhf/iD+4gG//rHPDJO/P2DdfcD+1gMyr88HXC98i87dB8zNB+Tj7gPi7gPy7gPq7gP67gOuuw9Ydx9w903Ou29y3n2T6+6bXHff5Lr7JtfdN7nuvsl1902uu29y3X2T6+6bXHff5L77JvfdN7nvvsl9903uu29y332T++6b3Hff5L77JveLN3mu83E08/uf664HbAI2CZuCTcPmgs2CzYbNgQ10sKCDBR0s6GBBBws6WNDBgg4WdLCggwUdbOhgQwcbOtjQwYYONnSwoYMNHWzoYEMHBzo40MGBDg50cKCDAx0c6OBABwc6ONDBQAcDHQx0MNDBQAcDHQx0MNDBQAfzxzs4jwdsAjYJm4JNw+aCzYLNhs2BDXQQ0EFABwEdBHQQ0EFABwEdBHQQ0EFABwkdJHSQ0EFCBwkdJHSQ0EFCBwkdJHRQ0EFBBwUdFHRQ0EFBBwUdFHRQ0EFBBw0dNHTQ0EFDBw0dNHTQ0EFDBw0dgCce8MQDnnjAEw944gFPPOCJBzzxgCce8MQDnnjAEw944gFPPOCJBzzxgCce8MQDnnjAEw944gFPPOCJBzzxgCce8MQDnnjAEw944gFPPOCJBzzxgCce8MQDnnjAEw944gFPPOCJBzzxgCce8MQDnnjAEw944gFPPOCJBzzxgCce8MQDnjjgiQOeOOCJA5444IkDnjjgiQOeOOCJA5444IkDnjjgiQOeOOCJA5444IkDnjjgiQOeOOCJA5444IkDnjjgiQOeOOCJA5444IkDnjjgiQOeOOCJA5444IkDnjjgiQOeOOCJA5444IkDnjjgiQOeOOCJA5444IkDnjjgiQOeOOCJA5444IkDnjjgiQOeOOCJA5444IkDnjjgiQOeOOCJA5444IkDnjjgiQOeOOCJA5444IkDnjjgiQOeOOCJA5444IkDnjjgiQOeOOCJA5444IkDnjjgiQOeOOCJA5444IkDnjjgiQOeOOCJA5444IkDnjjgiQOeOOCJ88c9sR5/3BN/3QRsEjYFm4bNBZsFmw2bAxvoIKCDgA4COgjoIKCDgA4COgjoIKCDgA4SOkjoIKGDhA4SOkjoIKGDhA4SOkjooKCDgg4KOijooKCDgg4KOijooKCDgg4aOmjooKGDhg4aOmjooKGDhg4aOmjo4IIOLujggg4u6OCCDi7o4IIOLujggg4u6GBBBws6WNDBgg4WdLCggwUdLOhgQQcLOtjQwYYONnSwoYMNHWzoYEMHGzrY0MGGDg50cKCDAx0c6OBABwc6ONDBgQ4OdHCgg4EOBjoY6GCgg4EOBjoY6GCgg4EOwBMDPDHAEwM8McATAzwxwBMDPDHAEwM8McATAzwxwBMDPDHAEwM8McATAzwxwBMDPDHAEwM8McATAzwxwBMDPDHAEwM8McATAzwxwBMDPDHAEwM8McATAzwxwBMDPDHAEwM8McATAzwxwBMDPDHAEwM8McATAzwxwBMDPDHAEwM8McATAzwxwBMDPDHAEwM8McATAzwxwBMDPDHAEwM8McATAzwxwBMDPDHAEwM8McATAzwxwBMDPDHAEwM8McATAzwxwBMDPDHAEwM8McATAzwxwBMDPDHAEwM8McATAzwxwBMDPDHAEwM8McATAzwxwBMDPDHAEwM8McATEzwxwRMTPDHBExM8McETEzwxwRMTPDHBExM8McETEzwxwRMTPDHBExM8McETEzwxwRMTPDHBExM8McETEzwxwRMTPDHBExM8McETEzwxwRMTPDHBExM8McETEzwxwRMTPDHBExM8McETEzwxwRMTPDHBExM8McETEzwxwRMTPDHBExM8McETEzwxwRMTPDHBExM8McETEzwxwRMTPDHBExM8McETEzwxwRMTPDHBExM8McETEzwxwRMTPDHBExM8McETEzwxwRMTPDHBExM8McETEzwxwRMTPDHBExM8McETEzwxwRMTPDHBExM8McETEzwxwRMTPDHBEws8scATCzyxwBMLPLHAEws8scATCzyxwBMLPLHAEws8scATCzyxwBMLPLHAEws8scATCzyxwBMLPLHAEws8scATCzyxwBMLPLHAEws8scATCzyxwBMLPLHAEws8scATCzyxwBMLPLHAEws8scATCzyxwBMLPLHAEws8scATCzyxwBMLPLHAEws8scATCzyxwBMLPLHAEws8scATCzyxwBMLPLHAEws8scATCzyxwBMLPLHAEws8scATCzyxwBMLPLHAEws8scATCzyxwBMLPLHAEws8scATCzyxwBMLPLHAEws8scATCzyxwBMLPLHAEws8scATCzyxwBMbPLHBExs8scETGzyxwRMbPLHBExs8scETGzyxwRMbPLHBExs8scETGzyxwRMbPLHBExs8scETGzyxwRMbPLHBExs8scETGzyxwRMbPLHBExs8scETGzyxwRMbPLHBExs8scETGzyxwRMbPLHBExs8scETGzyxwRMbPLFf9sR45Po4isfuf1jlWuffXv4Pca7eH4e//uV5Hq7nYevw0uHS4dbh0eHg8OX/Vr9lGDpMHWo5qeWklpNaTmo5qeWkllNaTmk5peWUllNaTmk5peWUllNaTmk5reW0ltNaTms5reW0ltNaTms5reW0lnNpOZeWc2k5l5ZzaTmXlnNpOZeWc2k5l5aztJyl5SwtZ2k5S8tZWs7ScpaWs7ScpeVsLWdrOVvL2VrO1nK2lrO1nK3lbC1nazlHyzlaztFyjpZztJyj5Rwt52g5R8s5Ws5oOaPljJYzWs5oOaPljJYzWs5oOaPlvPLy6Tctg5fJS9bAB3Pggz3wwSD4YBF8MAk+uKHghoIbCm7IRdlJ2U3ZUdlV2VmZXTkYloNlOZiWg205GJeDdTmYl4N9ORiYg4U5mJiDjTkYmYOVOZiZg505GJqDpTmYmoOtORibg7U5mJuj/f+OckMszsHkHGzOwegcrM7B7BzszsHwHCzPwfQcbM/B+Bysz8H8HOzPwQAdLNDBBB1s0MEIHcuf0+CG2KGDITpYooMpOtiigzE6WKODOTrYo2P7wz7cEJN0sEkHo3Sw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",
  "file_map": {
    "25": {
      "source": "mod hash;\nmod array;\nmod slice;\nmod merkle;\nmod schnorr;\nmod ecdsa_secp256k1;\nmod ecdsa_secp256r1;\nmod eddsa;\nmod grumpkin_scalar;\nmod grumpkin_scalar_mul;\nmod scalar_mul;\nmod sha256;\nmod sha512;\nmod field;\nmod ec;\nmod unsafe;\nmod collections;\nmod compat;\nmod option;\nmod string;\nmod test;\nmod cmp;\nmod ops;\nmod default;\nmod prelude;\nmod uint128;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(_with_newline: bool, _input: T) {}\n\nunconstrained pub fn print<T>(input: T) {\n    print_oracle(false, input);\n}\n\nunconstrained pub fn println<T>(input: T) {\n    print_oracle(true, input);\n}\n\n#[foreign(recursive_aggregation)]\npub fn verify_proof<N>(_verification_key: [Field], _proof: [Field], _public_inputs: [Field], _key_hash: Field) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(_x: T) {}\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(_x: Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(_x: T) -> Field {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y))\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n",
      "path": "std/lib.nr"
    },
    "43": {
      "source": "mod tests;\nuse dep::std;\nuse dep::ecrecover;\n\nglobal MERKLE_DEPTH = 6;\nfn main(\n    signer_pub_x_key: [u8; 32],\n    signer_pub_y_key: [u8; 32],\n    signature: [u8; 64],\n    selected_players_points: [[u8; 32]; 11],\n    player_points_merkle_paths: [[[u8; 32]; MERKLE_DEPTH]; 11],\n    all_player_points_merkle_root: [u8; 32],\n    selected_player_ids: pub [u8; 11],\n    selected_squad_hash: pub [u8; 32],\n    claimed_player_points: pub u64\n) {\n    ecdsa_verification(\n        signer_pub_x_key,\n        signer_pub_y_key,\n        signature,\n        selected_squad_hash\n    );\n\n    verify_squad_hash(selected_player_ids, selected_squad_hash);\n\n    // verify_all_merkle_roots(\n    //     selected_player_ids,\n    //     selected_players_points,\n    //     player_points_merkle_paths,\n    //     all_player_points_merkle_root\n    // );\n\n    let mut calculated_total_points: u64 = 0;\n\n    for point in selected_players_points {\n        for byte in point {\n            calculated_total_points += byte as u64;\n        }\n    }\n\n    assert(calculated_total_points == claimed_player_points);\n}\n\nfn verify_squad_hash(player_ids: [u8; 11], squad_hash: [u8; 32]) {\n    let computed_squad_hash= std::hash::keccak256(player_ids, 11);\n    assert(computed_squad_hash == squad_hash);\n}\n\nfn ecdsa_verification(\n    signer_pub_x_key: [u8; 32],\n    signer_pub_y_key: [u8; 32],\n    signature: [u8; 64],\n    hash: [u8; 32]\n) {\n    let computedAddress: Field = ecrecover::secp256k1::PubKey::from_xy(signer_pub_x_key, signer_pub_y_key).to_eth_address(); // Compute address from public key\n    let recoveredAddress = ecrecover::ecrecover(signer_pub_x_key, signer_pub_y_key, signature, hash);\n\n    println(f\"Computed address: {computedAddress}\");\n    println(f\"Recovered address: {recoveredAddress}\");\n    assert(computedAddress == recoveredAddress);\n}\n\nfn verify_all_merkle_roots(\n    player_ids: [u8; 11],\n    players_points: [[u8; 32]; 11],\n    merkle_paths: [[[u8; 32]; MERKLE_DEPTH]; 11],\n    merkle_root: [u8; 32]\n) {\n    for i in 0..11 {\n        compute_and_verify_merkle_root(players_points[i], player_ids[i], merkle_paths[i], merkle_root);\n    }\n}\n\nfn compute_and_verify_merkle_root(\n    leaf: [u8; 32],\n    leaf_index: u8,\n    proof: [[u8; 32]; MERKLE_DEPTH],\n    all_points_merkle_root: [u8; 32]\n) {\n    let mut computed_merkle_root: [u8; 32] = [0; 32];\n    computed_merkle_root=leaf;\n    let mut leaf_index_mut= leaf_index;\n    for i in 0..MERKLE_DEPTH {\n        if leaf_index_mut % 2 == 0 {\n            computed_merkle_root = std::hash::keccak256(concatenate_leafs(computed_merkle_root, proof[i]), 64);\n        } else {\n            computed_merkle_root = std::hash::keccak256(concatenate_leafs(proof[i], computed_merkle_root), 64);\n        }\n        leaf_index_mut = leaf_index_mut / 2;\n    }\n\n    println(f\"Computed merkle root: {computed_merkle_root}\");\n    println(f\"All points merkle root: {all_points_merkle_root}\");\n    assert(computed_merkle_root == all_points_merkle_root);\n}\n\nfn concatenate_leafs(leaf1: [u8; 32], leaf2: [u8; 32]) -> [u8; 64] {\n    let mut arr: [u8; 64] = [0; 64];\n    for i in 0..32 {\n        arr[i] = leaf1[i];\n        arr[i + 32] = leaf2[i];\n    }\n    arr\n}\n",
      "path": "/Users/gabrielantonyxaviour/Developer/projects/luffy/circuits/src/main.nr"
    },
    "44": {
      "source": "use dep::std;\n \nmod secp256k1;\n\nfn ecrecover(\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    signature: [u8; 64], // clip v value\n    hashed_message: [u8; 32]\n) -> Field {\n    let key = secp256k1::PubKey::from_xy(pub_key_x, pub_key_y);\n\n    assert(key.verify_sig(signature, hashed_message));\n    let addr = key.to_eth_address();\n\n    addr\n}\n\n#[test]\nfn test_ecrecover() {\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n\n    let addr = ecrecover(pub_key_x, pub_key_y, signature, hashed_message);\n    assert(addr == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n",
      "path": "/Users/gabrielantonyxaviour/nargo/github.com/colinnielsen/ecrecover-noirv0.19.0/src/lib.nr"
    },
    "45": {
      "source": "use dep::std;\n\nuse dep::array_helpers;\n\nstruct PubKey {\n    pub_x: [u8; 32],\n    pub_y: [u8; 32],\n}\n\nunconstrained\nfn split_uncompressed_pub_key(\n    pub_key: [u8; 65]\n) -> ([u8; 32], [u8; 32]) {\n    let mut pub_key_x: [u8; 32] = [0; 32];\n    let mut pub_key_y: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        pub_key_x[i] = pub_key[i + 1];\n        pub_key_y[i] = pub_key[i + 32 + 1];\n    };\n\n    (pub_key_x, pub_key_y)\n}\n\nimpl PubKey {\n    fn from_xy(pub_x: [u8; 32], pub_y: [u8; 32]) -> PubKey {\n        PubKey {\n            pub_x,\n            pub_y,\n        }\n    }\n\n    fn from_unified(pub_key: [u8; 64]) -> PubKey {\n        let (key_x, key_y) = array_helpers::split_u8_64_unconstrained(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    fn from_uncompressed(pub_key: [u8; 65]) -> PubKey {\n        assert(pub_key[0] == 0x04);\n        let (key_x, key_y) = split_uncompressed_pub_key(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    fn verify_sig(self, signature: [u8; 64], hashed_message: [u8; 32]) -> bool {\n        std::ecdsa_secp256k1::verify_signature(self.pub_x, self.pub_y, signature, hashed_message)\n    }\n\n    fn to_eth_address(self) -> Field {\n        let pub_key = array_helpers::u8_32_to_u8_64_unconstrained(self.pub_x, self.pub_y);\n        let hashed_pub_key = std::hash::keccak256(pub_key, 64);\n\n        let mut addr: Field = 0;\n        for i in 0..20 {\n            // shift left by 8 and add the new value\n            addr = (addr * 256) + hashed_pub_key[i + 12] as Field;\n        }\n\n        addr\n    }\n\n    fn ecrecover(\n        self,\n        signature: [u8; 64],\n        hashed_message: [u8; 32]\n    ) -> Field {\n        assert(self.verify_sig(signature, hashed_message));\n\n        self.to_eth_address()\n    }\n}\n\n\n#[test]\nfn test_ecrecover_via_key() {\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n\n    let key = PubKey::from_xy(pub_key_x, pub_key_y);\n    assert(key.ecrecover(signature, hashed_message) == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n",
      "path": "/Users/gabrielantonyxaviour/nargo/github.com/colinnielsen/ecrecover-noirv0.19.0/src/secp256k1.nr"
    },
    "46": {
      "source": "use dep::std;\n\nfn u8_32s_to_u64_16(\n    arr_a: [u8; 32],\n    arr_b: [u8; 32],\n) -> [u64; 16] {\n    let mut combined_u64: [u64; 16] = [0; 16];\n    \n    for i in 0..4 {\n        let mut value: u64 = 0;\n        for j in 0..8 {\n            value |= (arr_a[i*8+j] as u64) << ((56 - j*8) as u64);\n        }\n         combined_u64[i] = value;\n    }\n    for i in 4..8 {\n        let mut value: u64 = 0;\n        for j in 0..8 {\n            value |= (arr_b[(i-4)*8+j] as u64) << ((56 - j*8) as u64);\n        }\n         combined_u64[i] = value;\n    }\n\n    combined_u64\n}\n\nunconstrained\nfn u8_32s_to_u64_16_unconstrained(\n    arr_a: [u8; 32],\n    arr_b: [u8; 32],\n) -> [u64; 16] {\n    let mut combined_u64: [u64; 16] = [0; 16];\n    \n    for i in 0..4 {\n        let mut value: u64 = 0;\n        for j in 0..8 {\n            value |= (arr_a[i*8+j] as u64) << ((56 - j*8) as u64);\n        }\n         combined_u64[i] = value;\n    }\n    for i in 4..8 {\n        let mut value: u64 = 0;\n        for j in 0..8 {\n            value |= (arr_b[(i-4)*8+j] as u64) << ((56 - j*8) as u64);\n        }\n         combined_u64[i] = value;\n    }\n\n    combined_u64\n}\n\n#[test]\nfn test_u8_32s_to_u64_16() {\n    let arr_a: [u8; 32] = [\n        131,24,83,91,84,16,93,74,122,174,96,192,143,196,95,150,135,24,27,79,223,198,37,189,26,117,63,167,57,127,237,117\n    ];\n    let arr_b: [u8; 32] = [\n        53,71,241,28,168,105,102,70,242,243,172,176,142,49,1,106,250,194,62,99,12,93,17,245,159,97,254,245,123,13,42,165\n    ];\n    let out = u8_32s_to_u64_16(arr_a, arr_b);\n\n    assert(out[0] == 9446391870127103306);\n    assert(out[1] == 8840109498736861078);\n    assert(out[2] == 9734560624431998397);\n    assert(out[3] == 1906500004718046581);\n    assert(out[4] == 3839302312743495238);\n    assert(out[5] == 17506526050819047786);\n    assert(out[6] == 18069073250093961717);\n    assert(out[7] == 11484740855056378533);\n    assert(out[8] == 0);\n    assert(out[9] == 0);\n    assert(out[10] == 0);\n    assert(out[11] == 0);\n    assert(out[12] == 0);\n    assert(out[13] == 0);\n    assert(out[14] == 0);\n    assert(out[15] == 0);\n    // the above output is the hex \"0x8318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5\"\n}\n\nfn u8_32_to_u8_64(\n    arr_a: [u8; 32],\n    arr_b: [u8; 32],\n) -> [u8; 64] {\n    let mut combined: [u8; 64] = [0; 64];\n\n    for i in 0..32 {\n        combined[i] = arr_a[i];\n    }\n    for i in 0..32 {\n        combined[i + 32] = arr_b[i];\n    }\n\n    combined\n}\n\nunconstrained\nfn u8_32_to_u8_64_unconstrained(\n    arr_a: [u8; 32],\n    arr_b: [u8; 32],\n) -> [u8; 64] {\n    let mut combined: [u8; 64] = [0; 64];\n\n    for i in 0..32 {\n        combined[i] = arr_a[i];\n    }\n    for i in 0..32 {\n        combined[i + 32] = arr_b[i];\n    }\n\n    combined\n}\n\n\nfn u64_4_to_u8_32(\n    array: [u64; 4]\n) -> [u8; 32] {\n    let mut output: [u8; 32] = [0; 32];\n    let mut output_index = 0;\n\n    for num_idx in 0..4 {\n        for bit_pos in 0..8 {\n            let shift_amount: u64 = 56 - (bit_pos * 8) as u64;\n            output[output_index] = ((array[num_idx] >> shift_amount) & 255) as u8;\n            output_index += 1;\n        }\n    }\n\n    output\n}\n\nunconstrained\nfn u64_4_to_u8_32_unconstrained(\n    array: [u64; 4]\n) -> [u8; 32] {\n    let mut output: [u8; 32] = [0; 32];\n    let mut output_index = 0;\n\n    for num_idx in 0..4 {\n        for bit_pos in 0..8 {\n            let shift_amount: u64 = 56 - (bit_pos * 8) as u64;\n            output[output_index] = ((array[num_idx] >> shift_amount) & 255) as u8;\n            output_index += 1;\n        }\n    }\n\n    output\n}\n\n#[test]\nfn test_u64_4_to_u8_32() {\n    let hash: [u64; 4] = [\n        999647796417551690,\n        8840109498736861078,\n        9734560624431998397,\n        1906500004718046581\n    ];\n \n    let arr_out = u64_4_to_u8_32(hash);\n\n    assert(arr_out[0] == 13);\n    assert(arr_out[1] == 223);\n    assert(arr_out[2] == 118);\n    assert(arr_out[3] == 95);\n    assert(arr_out[4] == 221);\n    assert(arr_out[5] == 248);\n    assert(arr_out[6] == 93);\n    assert(arr_out[7] == 74);\n    assert(arr_out[8] == 122);\n    assert(arr_out[9] == 174);\n    assert(arr_out[10] == 96);\n    assert(arr_out[11] == 192);\n    assert(arr_out[12] == 143);\n    assert(arr_out[13] == 196);\n    assert(arr_out[14] == 95);\n    assert(arr_out[15] == 150);\n    assert(arr_out[16] == 135);\n    assert(arr_out[17] == 24);\n    assert(arr_out[18] == 27);\n    assert(arr_out[19] == 79);\n    assert(arr_out[20] == 223);\n    assert(arr_out[21] == 198);\n    assert(arr_out[22] == 37);\n    assert(arr_out[23] == 189);\n    assert(arr_out[24] == 26);\n    assert(arr_out[25] == 117);\n    assert(arr_out[26] == 63);\n    assert(arr_out[27] == 167);\n    assert(arr_out[28] == 57);\n    assert(arr_out[29] == 127);\n    assert(arr_out[30] == 237);\n    assert(arr_out[31] == 117);\n}\n\n/// @dev this method is used to convert a u8 array to a u160 (which is not supported by Noir, so it's represented as a Field)\n/// @dev will throw on Field overflow\nfn u8_to_u160(\n    array: [u8]\n) -> Field {\n    let mut addr: Field = 0;\n\n    for i in 0..20 {\n        // only take the last 20 bytes of the hash\n        addr = (addr * 256) + (array[i] as Field);\n    }\n\n    addr\n}\n\nunconstrained\nfn u8_to_u160_unconstrained(\n    array: [u8]\n) -> Field {\n    let mut addr: Field = 0;\n\n    for i in 0..20 {\n        // only take the last 20 bytes of the hash\n        addr = (addr * 256) + (array[i] as Field);\n    }\n\n    addr\n}\n\nfn u8_to_eth_address(\n    array: [u8]\n) -> Field {\n    u8_to_u160(array)\n}\n\nunconstrained\nfn u8_to_eth_address_unconstrained(\n    array: [u8]\n) -> Field {\n    u8_to_u160(array)\n}\n\n#[test]\nfn test_u8_32_to_u160() {\n    // keccak hash of hardhat 0 address pub key (0xc1ffd3cfee2d9e5cd67643f8f39fd6e51aad88f6f4ce6ab8827279cfffb92266) as u8 array\n    let hashed_pub_key = [\n        193,255,211,207,238,45,158,92,214,118,67,248,243,159,214,229,26,173,136,246,244,206,106,184,130,114,121,207,255,185,34,102\n    ];\n\n    let mut right_20_bytes: [u8] = [0; 20];\n    for i in 0..20 {\n        right_20_bytes[i] = hashed_pub_key[i + 12];\n    }\n\n    let addr = u8_to_u160(right_20_bytes);\n    let addr_aliased = u8_to_eth_address(right_20_bytes);\n\n    assert(addr == addr_aliased);\n    assert(addr == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266); // hardhat address 0\n}\n\nfn split_u8_64(\n    arr: [u8; 64]\n) -> ([u8; 32], [u8; 32]) {\n    let mut arr_a: [u8; 32] = [0; 32];\n    let mut arr_b: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        arr_a[i] = arr[i];\n        arr_b[i] = arr[i + 32];\n    };\n\n    (arr_a, arr_b)\n}\n\nunconstrained\nfn split_u8_64_unconstrained(\n    arr: [u8; 64]\n) -> ([u8; 32], [u8; 32]) {\n    let mut arr_a: [u8; 32] = [0; 32];\n    let mut arr_b: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        arr_a[i] = arr[i];\n        arr_b[i] = arr[i + 32];\n    };\n\n    (arr_a, arr_b)\n}\n\n#[test]\nfn test_split_u8_64() {\n    let u8_64 = [\n        193,255,211,207,238,45,158,92,214,118,67,248,243,159,214,229,26,173,136,246,244,206,106,184,130,114,121,207,255,185,34,102,\n        193,255,211,207,238,45,158,92,214,118,67,248,243,159,214,229,26,173,136,246,244,206,106,184,130,114,121,207,255,185,34,102\n    ];\n\n    let (arr_a, arr_b) = split_u8_64(u8_64);\n\n    for i in 0..32 {\n        assert(arr_a[i] == u8_64[i]);\n        assert(arr_b[i] == u8_64[i + 32]);\n    }\n}\n",
      "path": "/Users/gabrielantonyxaviour/nargo/github.com/colinnielsen/noir-array-helpersv0.19.0/src/lib.nr"
    }
  }
}
